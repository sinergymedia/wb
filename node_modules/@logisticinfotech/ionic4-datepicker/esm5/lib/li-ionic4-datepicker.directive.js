/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, HostListener, ElementRef, Renderer2 } from '@angular/core';
import { ModalController } from '@ionic/angular';
import { Ionic4DatepickerModalComponent } from './ionic4-datepicker-modal/ionic4-datepicker-modal.component';
import { NgModel, NgControl } from '@angular/forms';
import * as moment_ from 'moment';
/** @type {?} */
var moment = moment_;
var LiIonic4DatepickerDirective = /** @class */ (function () {
    // isModalOpen: any = false;
    function LiIonic4DatepickerDirective(modalCtrl, ngModel, control, el, renderer2) {
        this.modalCtrl = modalCtrl;
        this.ngModel = ngModel;
        this.control = control;
        this.el = el;
        this.renderer2 = renderer2;
        this.selectedDate = {};
    }
    /**
     * @return {?}
     */
    LiIonic4DatepickerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // console.log('config.yearInAscending : ' + this.inputDateConfig.yearInAscending);
        var _this = this;
        if (this.inputDateConfig.clearButton !== false) {
            this.closeIcon = document.createElement('ion-icon');
            this.closeIcon.name = 'close-circle';
            this.closeIcon.className = 'clearButton';
            this.closeIcon.style.position = 'absolute';
            this.closeIcon.style.right = '8px';
            this.closeIcon.style.bottom = '30%';
            this.closeIcon.style.fontSize = '18px';
            this.closeIcon.style.color = '#A9A9A9';
            this.closeIcon.style.zIndex = '5';
            if (this.el.nativeElement.parentNode.nodeName === 'ION-ITEM') {
                this.closeIcon.style.bottom = '12px';
            }
            this.el.nativeElement.parentNode.appendChild(this.closeIcon);
            this.renderer2.listen(this.closeIcon, 'click', (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                // Do something with 'event'
                // console.log('button clicks');
                _this.selectedDate.date = new Date();
                _this.control.control.setValue('');
                _this.ngModel.update.emit('');
            }));
        }
        /** @type {?} */
        var self = this;
        this.ngModel.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // console.log('ngModel value =>', value);
            self.selectedDate.date = value;
            if (_this.inputDateConfig.clearButton !== false) {
                if (!value) {
                    _this.closeIcon.style.visibility = 'hidden';
                }
                else {
                    _this.closeIcon.style.visibility = 'visible';
                }
            }
        }));
        this.control.control.valueChanges.subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // console.log('formcontrol value =>', value);
            self.selectedDate.date = value;
            if (_this.inputDateConfig.clearButton !== false) {
                if (!value) {
                    _this.closeIcon.style.visibility = 'hidden';
                }
                else {
                    _this.closeIcon.style.visibility = 'visible';
                }
            }
        }));
        if (this.control.control.value) {
            this.selectedDate.date = this.control.control.value;
        }
    };
    // @HostListener('click')
    // onClick() {
    //   // console.log('on click of component =>', this.inputDateConfig);
    //   if (!this.isModalOpen) {
    //     this.isModalOpen = true;
    //     this.openDatePicker();
    //   }
    // }
    // @HostListener('click')
    // onClick() {
    //   // console.log('on click of component =>', this.inputDateConfig);
    //   if (!this.isModalOpen) {
    //     this.isModalOpen = true;
    //     this.openDatePicker();
    //   }
    // }
    /**
     * @return {?}
     */
    LiIonic4DatepickerDirective.prototype.onFocus = 
    // @HostListener('click')
    // onClick() {
    //   // console.log('on click of component =>', this.inputDateConfig);
    //   if (!this.isModalOpen) {
    //     this.isModalOpen = true;
    //     this.openDatePicker();
    //   }
    // }
    /**
     * @return {?}
     */
    function () {
        // if (!this.isModalOpen) {
        // this.isModalOpen = true;
        this.openDatePicker();
        // }
    };
    /**
     * @return {?}
     */
    LiIonic4DatepickerDirective.prototype.openDatePicker = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var datePickerModal;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // console.log('openDatePicker');
                        return [4 /*yield*/, this.modalCtrl.create({
                                component: Ionic4DatepickerModalComponent,
                                cssClass: 'li-ionic4-datePicker',
                                componentProps: { 'objConfig': this.inputDateConfig, 'selectedDate': this.selectedDate.date }
                            })];
                    case 1:
                        datePickerModal = _a.sent();
                        return [4 /*yield*/, datePickerModal.present()];
                    case 2:
                        _a.sent();
                        datePickerModal.onDidDismiss()
                            .then((/**
                         * @param {?} data
                         * @return {?}
                         */
                        function (data) {
                            // this.isModalOpen = false;
                            if (data.data && data.data.date && data.data.date !== 'Invalid date') {
                                _this.selectedDate.date = data.data.date;
                                _this.control.control.setValue(data.data.date);
                                _this.ngModel.update.emit(data.data.date);
                            }
                        }));
                        return [2 /*return*/];
                }
            });
        });
    };
    LiIonic4DatepickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[liIonic4Datepicker]',
                    exportAs: 'liIonic4Datepicker',
                    providers: [NgModel]
                },] }
    ];
    /** @nocollapse */
    LiIonic4DatepickerDirective.ctorParameters = function () { return [
        { type: ModalController },
        { type: NgModel },
        { type: NgControl },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    LiIonic4DatepickerDirective.propDecorators = {
        inputDateConfig: [{ type: Input, args: ['liIonic4Datepicker',] }],
        onFocus: [{ type: HostListener, args: ['ionFocus',] }]
    };
    return LiIonic4DatepickerDirective;
}());
export { LiIonic4DatepickerDirective };
if (false) {
    /** @type {?} */
    LiIonic4DatepickerDirective.prototype.inputDateConfig;
    /** @type {?} */
    LiIonic4DatepickerDirective.prototype.closeIcon;
    /** @type {?} */
    LiIonic4DatepickerDirective.prototype.selectedDate;
    /**
     * @type {?}
     * @private
     */
    LiIonic4DatepickerDirective.prototype.modalCtrl;
    /** @type {?} */
    LiIonic4DatepickerDirective.prototype.ngModel;
    /** @type {?} */
    LiIonic4DatepickerDirective.prototype.control;
    /** @type {?} */
    LiIonic4DatepickerDirective.prototype.el;
    /** @type {?} */
    LiIonic4DatepickerDirective.prototype.renderer2;
}
//# sourceMappingURL=data:application/json;base64,