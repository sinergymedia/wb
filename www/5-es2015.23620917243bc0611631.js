(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"cqX/":function(e,t,r){"use strict";r.d(t,"a",function(){return n});class n{}},"x4++":function(e,t,r){"use strict";r.d(t,"a",function(){return R});var n=r("itXk"),o=r("HDdC"),i=r("UXun"),a=r("lJxs");r("SxV6");for(var u="0123456789bcdefghjkmnpqrstuvwxyz",s={},c=0;c<u.length;c++)s[u.charAt(c)]=c;var d=[0,5,7,8,11,12,13,15,16,17,18],f=function(e,t,r){if("auto"===r){if("number"==typeof e||"number"==typeof t)throw new Error("string notation required for auto precision.");var n=e.split(".")[1].length,o=t.split(".")[1].length,i=Math.max(n,o);r=d[i]}else void 0===r&&(r=9);for(var a,s=[],c=0,f=0,h=0,l=90,p=-90,g=180,y=-180;s.length<r;)f%2==0?t>(a=(g+y)/2)?(h=1+(h<<1),y=a):(h=0+(h<<1),g=a):e>(a=(l+p)/2)?(h=1+(h<<1),p=a):(h=0+(h<<1),l=a),f++,5==++c&&(s.push(u[h]),c=0,h=0);return s.join("")};function h(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function l(e,t){return e(t={exports:{}},t.exports),t.exports}var p=l(function(e,t){function r(e,t,r){void 0===r&&(r={});var n={type:"Feature"};return(0===r.id||r.id)&&(n.id=r.id),r.bbox&&(n.bbox=r.bbox),n.properties=t||{},n.geometry=e,n}function n(e,t,n){return void 0===n&&(n={}),r({type:"Point",coordinates:e},t,n)}function o(e,t,n){void 0===n&&(n={});for(var o=0,i=e;o<i.length;o++){var a=i[o];if(a.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var u=0;u<a[a.length-1].length;u++)if(a[a.length-1][u]!==a[0][u])throw new Error("First and last Position are not equivalent.")}return r({type:"Polygon",coordinates:e},t,n)}function i(e,t,n){if(void 0===n&&(n={}),e.length<2)throw new Error("coordinates must be an array of two or more positions");return r({type:"LineString",coordinates:e},t,n)}function a(e,t){void 0===t&&(t={});var r={type:"FeatureCollection"};return t.id&&(r.id=t.id),t.bbox&&(r.bbox=t.bbox),r.features=e,r}function u(e,t,n){return void 0===n&&(n={}),r({type:"MultiLineString",coordinates:e},t,n)}function s(e,t,n){return void 0===n&&(n={}),r({type:"MultiPoint",coordinates:e},t,n)}function c(e,t,n){return void 0===n&&(n={}),r({type:"MultiPolygon",coordinates:e},t,n)}function d(e,r){void 0===r&&(r="kilometers");var n=t.factors[r];if(!n)throw new Error(r+" units is invalid");return e*n}function f(e,r){void 0===r&&(r="kilometers");var n=t.factors[r];if(!n)throw new Error(r+" units is invalid");return e/n}function h(e){return e%(2*Math.PI)*180/Math.PI}function l(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)&&!/^\s*$/.test(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.earthRadius=6371008.8,t.factors={centimeters:100*t.earthRadius,centimetres:100*t.earthRadius,degrees:t.earthRadius/111325,feet:3.28084*t.earthRadius,inches:39.37*t.earthRadius,kilometers:t.earthRadius/1e3,kilometres:t.earthRadius/1e3,meters:t.earthRadius,metres:t.earthRadius,miles:t.earthRadius/1609.344,millimeters:1e3*t.earthRadius,millimetres:1e3*t.earthRadius,nauticalmiles:t.earthRadius/1852,radians:1,yards:t.earthRadius/1.0936},t.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:.001,kilometres:.001,meters:1,metres:1,miles:1/1609.344,millimeters:1e3,millimetres:1e3,nauticalmiles:1/1852,radians:1/t.earthRadius,yards:1/1.0936},t.areaFactors={acres:247105e-9,centimeters:1e4,centimetres:1e4,feet:10.763910417,inches:1550.003100006,kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,miles:386e-9,millimeters:1e6,millimetres:1e6,yards:1.195990046},t.feature=r,t.geometry=function(e,t,r){switch(void 0===r&&(r={}),e){case"Point":return n(t).geometry;case"LineString":return i(t).geometry;case"Polygon":return o(t).geometry;case"MultiPoint":return s(t).geometry;case"MultiLineString":return u(t).geometry;case"MultiPolygon":return c(t).geometry;default:throw new Error(e+" is invalid")}},t.point=n,t.points=function(e,t,r){return void 0===r&&(r={}),a(e.map(function(e){return n(e,t)}),r)},t.polygon=o,t.polygons=function(e,t,r){return void 0===r&&(r={}),a(e.map(function(e){return o(e,t)}),r)},t.lineString=i,t.lineStrings=function(e,t,r){return void 0===r&&(r={}),a(e.map(function(e){return i(e,t)}),r)},t.featureCollection=a,t.multiLineString=u,t.multiPoint=s,t.multiPolygon=c,t.geometryCollection=function(e,t,n){return void 0===n&&(n={}),r({type:"GeometryCollection",geometries:e},t,n)},t.round=function(e,t){if(void 0===t&&(t=0),t&&!(t>=0))throw new Error("precision must be a positive number");var r=Math.pow(10,t||0);return Math.round(e*r)/r},t.radiansToLength=d,t.lengthToRadians=f,t.lengthToDegrees=function(e,t){return h(f(e,t))},t.bearingToAzimuth=function(e){var t=e%360;return t<0&&(t+=360),t},t.radiansToDegrees=h,t.degreesToRadians=function(e){return e%360*Math.PI/180},t.convertLength=function(e,t,r){if(void 0===t&&(t="kilometers"),void 0===r&&(r="kilometers"),!(e>=0))throw new Error("length must be a positive number");return d(f(e,t),r)},t.convertArea=function(e,r,n){if(void 0===r&&(r="meters"),void 0===n&&(n="kilometers"),!(e>=0))throw new Error("area must be a positive number");var o=t.areaFactors[r];if(!o)throw new Error("invalid original units");var i=t.areaFactors[n];if(!i)throw new Error("invalid final units");return e/o*i},t.isNumber=l,t.isObject=function(e){return!!e&&e.constructor===Object},t.validateBBox=function(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach(function(e){if(!l(e))throw new Error("bbox must only contain numbers")})},t.validateId=function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")},t.radians2degrees=function(){throw new Error("method has been renamed to `radiansToDegrees`")},t.degrees2radians=function(){throw new Error("method has been renamed to `degreesToRadians`")},t.distanceToDegrees=function(){throw new Error("method has been renamed to `lengthToDegrees`")},t.distanceToRadians=function(){throw new Error("method has been renamed to `lengthToRadians`")},t.radiansToDistance=function(){throw new Error("method has been renamed to `radiansToLength`")},t.bearingToAngle=function(){throw new Error("method has been renamed to `bearingToAzimuth`")},t.convertDistance=function(){throw new Error("method has been renamed to `convertLength`")}});h(p);var g=l(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.getCoord=function(e){if(!e)throw new Error("coord is required");if(!Array.isArray(e)){if("Feature"===e.type&&null!==e.geometry&&"Point"===e.geometry.type)return e.geometry.coordinates;if("Point"===e.type)return e.coordinates}if(Array.isArray(e)&&e.length>=2&&!Array.isArray(e[0])&&!Array.isArray(e[1]))return e;throw new Error("coord must be GeoJSON Point or an Array of numbers")},t.getCoords=function(e){if(Array.isArray(e))return e;if("Feature"===e.type){if(null!==e.geometry)return e.geometry.coordinates}else if(e.coordinates)return e.coordinates;throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")},t.containsNumber=function e(t){if(t.length>1&&p.isNumber(t[0])&&p.isNumber(t[1]))return!0;if(Array.isArray(t[0])&&t[0].length)return e(t[0]);throw new Error("coordinates must only contain numbers")},t.geojsonType=function(e,t,r){if(!t||!r)throw new Error("type and name required");if(!e||e.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.type)},t.featureOf=function(e,t,r){if(!e)throw new Error("No feature passed");if(!r)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!e.geometry||e.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+e.geometry.type)},t.collectionOf=function(e,t,r){if(!e)throw new Error("No featureCollection passed");if(!r)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+r+", FeatureCollection required");for(var n=0,o=e.features;n<o.length;n++){var i=o[n];if(!i||"Feature"!==i.type||!i.geometry)throw new Error("Invalid input to "+r+", Feature with geometry required");if(!i.geometry||i.geometry.type!==t)throw new Error("Invalid input to "+r+": must be a "+t+", given "+i.geometry.type)}},t.getGeom=function(e){return"Feature"===e.type?e.geometry:e},t.getType=function(e,t){return"FeatureCollection"===e.type?"FeatureCollection":"GeometryCollection"===e.type?"GeometryCollection":"Feature"===e.type&&null!==e.geometry?e.geometry.type:e.type}});h(g);var y=h(l(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){void 0===r&&(r={});var n=g.getCoord(e),o=g.getCoord(t),i=p.degreesToRadians(o[1]-n[1]),a=p.degreesToRadians(o[0]-n[0]),u=p.degreesToRadians(n[1]),s=p.degreesToRadians(o[1]),c=Math.pow(Math.sin(i/2),2)+Math.pow(Math.sin(a/2),2)*Math.cos(u)*Math.cos(s);return p.radiansToLength(2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c)),r.units)}})),m=h(l(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t,r,n){if(void 0===n&&(n={}),!0===n.final)return function(t,r){return(e(r,t)+180)%360}(t,r);var o=g.getCoord(t),i=g.getCoord(r),a=p.degreesToRadians(o[0]),u=p.degreesToRadians(i[0]),s=p.degreesToRadians(o[1]),c=p.degreesToRadians(i[1]),d=Math.sin(u-a)*Math.cos(c),f=Math.cos(s)*Math.sin(c)-Math.sin(s)*Math.cos(c)*Math.cos(u-a);return p.radiansToDegrees(Math.atan2(d,f))}})),w=function(){function e(e,t,r){this.app=e,this.latitude=t,this.longitude=r}return e.neighbors=function(e){return function(t){var r=e.length,n=function(t){var r=function(e){for(var t,r=!0,n=90,o=-90,i=180,a=-180,u=0,c=0,d=e.length;c<d;c++){var f=e[c].toLowerCase();u=s[f];for(var h=4;h>=0;h--){var l=u>>h&1;r?(t=(i+a)/2,1===l?a=t:i=t):(t=(n+o)/2,1===l?o=t:n=t),r=!r}}return[o,a,n,i]}(e),n=(r[0]+r[2])/2,o=(r[1]+r[3])/2;return{latitude:n,longitude:o,error:{latitude:r[2]-n,longitude:r[3]-o}}}(),o=n.latitude,i=n.longitude,a=2*n.error.latitude,u=2*n.error.longitude;function c(e,t){return f(o+e*a,i+t*u,r)}return[c(1,0),c(1,1),c(0,1),c(-1,1),c(-1,0),c(-1,-1),c(0,-1),c(1,-1)]}()},e.distance=function(t,r){return y(e.geoJSON(t),e.geoJSON(r))},e.bearing=function(t,r){return m(e.geoJSON(t),e.geoJSON(r))},e.geoJSON=function(e,t){var r;return{type:"Feature",geometry:{type:"Point",coordinates:e=[(r=e)[1],r[0]]},properties:t}},Object.defineProperty(e.prototype,"hash",{get:function(){return f(this.latitude,this.longitude,9)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"neighbors",{get:function(){return e.neighbors(this.hash)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"geoJSON",{get:function(){return e.geoJSON(this.coords)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"geoPoint",{get:function(){return new this.app.firestore.GeoPoint(this.latitude,this.longitude)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"coords",{get:function(){return[this.latitude,this.longitude]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"data",{get:function(){return{geopoint:this.geoPoint,geohash:this.hash}},enumerable:!0,configurable:!0}),e.prototype.distance=function(t,r){return e.distance(this.coords,[t,r])},e.prototype.bearing=function(t,r){return e.bearing(this.coords,[t,r])},e}(),b=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},v={units:"km"},E=function(){function e(e,t,r){this.app=e,this.path=t,this.ref=e.firestore().collection(t),r&&(this.query=r(this.ref)),this.setStream()}return e.prototype.snapshot=function(){return this.stream},e.prototype.data=function(e){return void 0===e&&(e="id"),this.stream.pipe(P(e))},e.prototype.add=function(e){return this.ref.add(e)},e.prototype.delete=function(e){return this.ref.doc(e).delete()},e.prototype.setDoc=function(e,t){return this.ref.doc(e).set(t)},e.prototype.setPoint=function(e,t,r,n){var o,i=new w(this.app,r,n).data;return this.ref.doc(e).set(((o={})[t]=i,o),{merge:!0})},e.prototype.changeQuery=function(e){this.query=e(this.ref),this.setStream()},e.prototype.setStream=function(){this.query=this.query||this.ref,this.stream=M(this.query||this.ref).pipe(Object(i.a)(1))},e.prototype.within=function(e,t,r,o){var u=this;void 0===o&&(o=v);var s=function(e){switch(!0){case t<=.00477:return 9;case t<=.0382:return 8;case t<=.153:return 7;case t<=1.22:return 6;case t<=4.89:return 5;case t<=39.1:return 4;case t<=156:return 3;case t<=1250:return 2;default:return 1}}(),c=e.hash.substr(0,s),d=w.neighbors(c).concat(c).map(function(e){return M(u.queryPoint(e,r)).pipe(P())});return n.a.apply(void 0,d).pipe(Object(a.a)(function(n){return n.reduce(function(e,t){return e.concat(t)}).filter(function(n){return e.distance(n[r].geopoint.latitude,n[r].geopoint.longitude)<=1.02*t}).map(function(t){var n=t[r].geopoint.latitude,o=t[r].geopoint.longitude,i={distance:e.distance(n,o),bearing:e.bearing(n,o)};return b({},t,{queryMetadata:i})}).sort(function(e,t){return e.queryMetadata.distance-t.queryMetadata.distance})}),Object(i.a)(1))},e.prototype.first=function(){},e.prototype.queryPoint=function(e,t){var r=e+"~";return this.query.orderBy(t+".geohash").startAt(e).endAt(r)},e}();function P(e){return void 0===e&&(e="id"),Object(a.a)(function(t){return t.docs.map(function(t){return b({},e?((r={})[e]=t.id,r):null,t.data());var r})})}function M(e){return new o.a(function(t){return{unsubscribe:e.onSnapshot(t)}})}var O=function(){function e(e){this.app=e}return e.prototype.collection=function(e,t){return new E(this.app,e,t)},e.prototype.point=function(e,t){return new w(this.app,e,t)},e}();function R(e){return new O(e)}}}]);